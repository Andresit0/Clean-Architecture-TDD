// Mocks generated by Mockito 5.4.0 from annotations
// in clean_architecture/test/infrastructure/repositories/criptocurrency_repository_imp_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:clean_architecture/domain/datasources/_datasources.lib.dart'
    as _i2;
import 'package:clean_architecture/domain/entities/_entities.lib.dart' as _i3;
import 'package:clean_architecture/infrastructure/repositories/_repositories.lib.dart'
    as _i6;
import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCriptocurrencyDatasource_0 extends _i1.SmartFake
    implements _i2.CriptocurrencyDatasource {
  _FakeCriptocurrencyDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCriptoCurrencyListStateEntity_1 extends _i1.SmartFake
    implements _i3.CriptoCurrencyListStateEntity {
  _FakeCriptoCurrencyListStateEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_2 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_3 extends _i1.SmartFake
    implements _i4.InheritedWidget {
  _FakeInheritedWidget_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i5.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeBuildContext_5 extends _i1.SmartFake implements _i4.BuildContext {
  _FakeBuildContext_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObject_6 extends _i1.SmartFake implements Object {
  _FakeObject_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CriptocurrencyRepositoryImp].
///
/// See the documentation for Mockito's code generation for more information.
class MockCriptocurrencyRepositoryImp extends _i1.Mock
    implements _i6.CriptocurrencyRepositoryImp {
  MockCriptocurrencyRepositoryImp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CriptocurrencyDatasource get datasource => (super.noSuchMethod(
        Invocation.getter(#datasource),
        returnValue: _FakeCriptocurrencyDatasource_0(
          this,
          Invocation.getter(#datasource),
        ),
      ) as _i2.CriptocurrencyDatasource);
  @override
  _i7.Future<_i3.CriptoCurrencyListStateEntity> getCriptocurrency({
    required List<String>? currencyIdsList,
    required _i4.BuildContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCriptocurrency,
          [],
          {
            #currencyIdsList: currencyIdsList,
            #context: context,
          },
        ),
        returnValue: _i7.Future<_i3.CriptoCurrencyListStateEntity>.value(
            _FakeCriptoCurrencyListStateEntity_1(
          this,
          Invocation.method(
            #getCriptocurrency,
            [],
            {
              #currencyIdsList: currencyIdsList,
              #context: context,
            },
          ),
        )),
      ) as _i7.Future<_i3.CriptoCurrencyListStateEntity>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i4.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.Widget);
  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);
  @override
  _i4.InheritedWidget dependOnInheritedElement(
    _i4.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_3(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i4.InheritedWidget);
  @override
  void visitAncestorElements(bool Function(_i4.Element)? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void visitChildElements(_i4.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispatchNotification(_i4.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);
  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);
  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);
  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}

/// A class which mocks [RestErrorEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestErrorEntity extends _i1.Mock implements _i3.RestErrorEntity {
  MockRestErrorEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set responseCode(int? _responseCode) => super.noSuchMethod(
        Invocation.setter(
          #responseCode,
          _responseCode,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_5(
          this,
          Invocation.getter(#context),
        ),
      ) as _i4.BuildContext);
  @override
  String get httpPath => (super.noSuchMethod(
        Invocation.getter(#httpPath),
        returnValue: '',
      ) as String);
  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: '',
      ) as String);
  @override
  String get stackTrace => (super.noSuchMethod(
        Invocation.getter(#stackTrace),
        returnValue: '',
      ) as String);
  @override
  Object get exception => (super.noSuchMethod(
        Invocation.getter(#exception),
        returnValue: _FakeObject_6(
          this,
          Invocation.getter(#exception),
        ),
      ) as Object);
  @override
  String get messageToShow => (super.noSuchMethod(
        Invocation.getter(#messageToShow),
        returnValue: '',
      ) as String);
}
